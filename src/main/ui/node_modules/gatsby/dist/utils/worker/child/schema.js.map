{"version":3,"sources":["../../../../src/utils/worker/child/schema.ts"],"names":["setInferenceMetadata","buildSchema","workerStore","store","getState","config","pathPrefix","Error","fullMetadataBuild","freeze","parentSpan"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEO,SAASA,oBAAT,GAAsC;AAC3C,uBAAS,CAAE,mBAAF,CAAT;AACD;;AAEM,eAAeC,WAAf,GAA4C;AAAA;;AACjD,QAAMC,WAAW,GAAGC,aAAMC,QAAN,EAApB,CADiD,CAGjD;;;AACA,MAAI,0BAACF,WAAD,aAACA,WAAD,8CAACA,WAAW,CAAEG,MAAd,wDAAC,oBAAqBC,UAAtB,yEAAoC,IAApC,MAA8C,IAAlD,EAAwD;AACtD,UAAMC,KAAK,CACR,0EADQ,CAAX;AAGD;;AAEDP,EAAAA,oBAAoB;AAEpB,QAAM,4BAAe,2BAAf,CAAN,CAZiD,CAcjD;;AACA,QAAM,mBAAM;AAAEQ,IAAAA,iBAAiB,EAAE,KAArB;AAA4BC,IAAAA,MAAM,EAAE,IAApC;AAA0CC,IAAAA,UAAU,EAAE;AAAtD,GAAN,CAAN;AACD","sourcesContent":["import { store } from \"../../../redux\"\nimport { build } from \"../../../schema\"\nimport apiRunnerNode from \"../../api-runner-node\"\nimport { setState } from \"./state\"\n\nexport function setInferenceMetadata(): void {\n  setState([`inferenceMetadata`])\n}\n\nexport async function buildSchema(): Promise<void> {\n  const workerStore = store.getState()\n\n  // pathPrefix: '' will at least be defined when config is loaded\n  if ((workerStore?.config?.pathPrefix ?? null) === null) {\n    throw Error(\n      `Config loading didn't finish before attempting to build schema in worker`\n    )\n  }\n\n  setInferenceMetadata()\n\n  await apiRunnerNode(`createSchemaCustomization`)\n\n  // build() runs other lifecycles like \"createResolvers\" or \"setFieldsOnGraphQLNodeType\" internally\n  await build({ fullMetadataBuild: false, freeze: true, parentSpan: {} })\n}\n"],"file":"schema.js"}