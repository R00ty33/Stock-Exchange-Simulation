{"version":3,"sources":["../../src/services/initialize.ts"],"names":["process","env","gatsby_executing_command","GATSBY_EXPERIMENTAL_FAST_DEV","GATSBY_EXPERIMENTAL_DEV_SSR","PRESERVE_FILE_DOWNLOAD_CACHE","PRESERVE_WEBPACK_CACHE","reporter","info","telemetry","trackFeatureIsUsed","on","reason","panic","initialize","program","args","parentSpan","GATSBY_DISABLE_CACHE_PERSISTENCE","setStore","store","directory","extensions","browserslist","dispatch","type","payload","activityForJobs","emitter","phantomActivity","start","onEndJob","getState","jobs","active","length","end","activity","activityTimer","config","flattenedPlugins","siteDirectory","processFlags","GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND","GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR","polyfill","warn","CYPRESS_SUPPORT","verbose","jobsV2","pluginsStr","_","uniq","map","p","name","version","decorateEvent","plugins","span","cacheDirectory","publicDirectory","workerCacheDirectory","cacheJsonDirExists","fs","existsSync","publicDirExists","workerCacheDirExists","NODE_ENV","GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING","remove","catch","emptyDir","pluginVersions","hashes","Promise","all","pluginsHash","crypto","createHash","update","JSON","stringify","concat","digest","state","oldPluginsHash","status","PLUGINS_HASH","stripIndent","cacheIsCorrupt","GATSBY_EXPERIMENTAL_PRESERVE_FILE_DOWNLOAD_CACHE","GATSBY_EXPERIMENTAL_PRESERVE_WEBPACK_CACHE","deleteGlobs","push","e","error","pluginCachesPurged","ensureDir","srcDir","__dirname","siteDir","tryRequire","copy","ensureDirSync","err","hasAPIFile","plugin","skipSSR","undefined","envAPIs","require","resolve","path","join","Array","isArray","isResolved","isResolvedSSR","ssrPlugins","options","pluginOptions","filter","browserPlugins","browserPluginsRequires","relativePluginPath","relative","browserAPIRunner","sSRAPIRunner","readFileSync","ssrPluginsRequires","writeFileSync","apiResults","traceId","flattenDeep","workerPool","WorkerPool","create"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\nimport { slash, isCI } from \"gatsby-core-utils\"\nimport fs from \"fs-extra\"\nimport md5File from \"md5-file\"\nimport crypto from \"crypto\"\nimport del from \"del\"\nimport path from \"path\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { getBrowsersList } from \"../utils/browserslist\"\nimport { Store, AnyAction } from \"redux\"\nimport * as WorkerPool from \"../utils/worker/pool\"\nimport { startPluginRunner } from \"../redux/plugin-runner\"\nimport { store, emitter } from \"../redux\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { removeStaleJobs } from \"../bootstrap/remove-stale-jobs\"\nimport { IPluginInfoOptions } from \"../bootstrap/load-plugins/types\"\nimport { IGatsbyState, IStateProgram } from \"../redux/types\"\nimport { IBuildContext } from \"./types\"\nimport { detectLmdbStore } from \"../datastore\"\nimport { loadConfigAndPlugins } from \"../bootstrap/load-config-and-plugins\"\n\ninterface IPluginResolution {\n  resolve: string\n  options: IPluginInfoOptions\n}\n\ninterface IPluginResolutionSSR extends IPluginResolution {\n  name: string\n}\n\n// If the env variable GATSBY_EXPERIMENTAL_FAST_DEV is set, enable\n// all DEV experimental changes (but only during development & not on CI).\nif (\n  process.env.gatsby_executing_command === `develop` &&\n  process.env.GATSBY_EXPERIMENTAL_FAST_DEV &&\n  !isCI()\n) {\n  process.env.GATSBY_EXPERIMENTAL_DEV_SSR = `true`\n  process.env.PRESERVE_FILE_DOWNLOAD_CACHE = `true`\n  process.env.PRESERVE_WEBPACK_CACHE = `true`\n\n  reporter.info(`\nThree fast dev experiments are enabled: Development SSR, preserving file download cache and preserving webpack cache.\n\nPlease give feedback on their respective umbrella issues!\n\n- https://gatsby.dev/dev-ssr-feedback\n- https://gatsby.dev/cache-clearing-feedback\n  `)\n\n  telemetry.trackFeatureIsUsed(`FastDev`)\n}\n\n// Show stack trace on unhandled promises.\nprocess.on(`unhandledRejection`, (reason: unknown) => {\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/33636\n  reporter.panic((reason as Error) || `Unhandled rejection`)\n})\n\n// Override console.log to add the source file + line number.\n// Useful for debugging if you lose a console.log somewhere.\n// Otherwise leave commented out.\n// require(`../bootstrap/log-line-function`)\n\nexport async function initialize({\n  program: args,\n  parentSpan,\n}: IBuildContext): Promise<{\n  store: Store<IGatsbyState, AnyAction>\n  workerPool: WorkerPool.GatsbyWorkerPool\n}> {\n  if (process.env.GATSBY_DISABLE_CACHE_PERSISTENCE) {\n    reporter.info(\n      `GATSBY_DISABLE_CACHE_PERSISTENCE is enabled. Cache won't be persisted. Next builds will not be able to reuse any work done by current session.`\n    )\n    telemetry.trackFeatureIsUsed(`DisableCachePersistence`)\n  }\n  if (!args) {\n    reporter.panic(`Missing program args`)\n  }\n\n  /* Time for a little story...\n   * When running `gatsby develop`, the globally installed gatsby-cli starts\n   * and sets up a Redux store (which is where logs are now stored). When gatsby\n   * finds your project's locally installed gatsby-cli package in node_modules,\n   * it switches over. This instance will have a separate redux store. We need to\n   * ensure that the correct store is used which is why we call setStore\n   * (/packages/gatsby-cli/src/reporter/redux/index.js)\n   *\n   * This function\n   * - copies over the logs from the global gatsby-cli to the local one\n   * - sets the store to the local one (so that further actions dispatched by\n   * the global gatsby-cli are handled by the local one)\n   */\n  if (args.setStore) {\n    args.setStore(store)\n  }\n\n  const directory = slash(args.directory)\n\n  const program: IStateProgram = {\n    ...args,\n    extensions: [],\n    browserslist: getBrowsersList(directory),\n    // Fix program directory path for windows env.\n    directory,\n  }\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: program,\n  })\n\n  let activityForJobs\n\n  emitter.on(`CREATE_JOB`, () => {\n    if (!activityForJobs) {\n      activityForJobs = reporter.phantomActivity(`Running jobs`)\n      activityForJobs.start()\n    }\n  })\n\n  const onEndJob = (): void => {\n    if (activityForJobs && store.getState().jobs.active.length === 0) {\n      activityForJobs.end()\n      activityForJobs = null\n    }\n  }\n\n  emitter.on(`END_JOB`, onEndJob)\n\n  // Try opening the site's gatsby-config.js file.\n  let activity = reporter.activityTimer(\n    `open and validate gatsby-configs, load plugins`,\n    {\n      parentSpan,\n    }\n  )\n  activity.start()\n\n  const { config, flattenedPlugins } = await loadConfigAndPlugins({\n    siteDirectory: program.directory,\n    processFlags: true,\n  })\n\n  // TODO: figure out proper way of disabling loading indicator\n  // for now GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR=false gatsby develop\n  // will work, but we don't want to force users into using env vars\n  if (\n    process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND &&\n    !process.env.GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR\n  ) {\n    // if query on demand is enabled and GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR was not set at all\n    // enable loading indicator\n    process.env.GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR = `true`\n  }\n  detectLmdbStore()\n\n  if (config && config.polyfill) {\n    reporter.warn(\n      `Support for custom Promise polyfills has been removed in Gatsby v2. We only support Babel 7's new automatic polyfilling behavior.`\n    )\n  }\n\n  activity.end()\n\n  if (process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND) {\n    if (process.env.gatsby_executing_command !== `develop`) {\n      // we don't want to ever have this flag enabled for anything than develop\n      // in case someone have this env var globally set\n      delete process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND\n    } else if (isCI() && !process.env.CYPRESS_SUPPORT) {\n      delete process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND\n      reporter.verbose(\n        `Experimental Query on Demand feature is not available in CI environment. Continuing with eager query running.`\n      )\n    }\n  }\n\n  // run stale jobs\n  // @ts-ignore we'll need to fix redux typings https://redux.js.org/usage/usage-with-typescript\n  store.dispatch(removeStaleJobs(store.getState().jobsV2))\n\n  // Multiple occurrences of the same name-version-pair can occur,\n  // so we report an array of unique pairs\n  const pluginsStr = _.uniq(flattenedPlugins.map(p => `${p.name}@${p.version}`))\n  telemetry.decorateEvent(`BUILD_END`, {\n    plugins: pluginsStr,\n  })\n\n  telemetry.decorateEvent(`DEVELOP_STOP`, {\n    plugins: pluginsStr,\n  })\n\n  // Start plugin runner which listens to the store\n  // and invokes Gatsby API based on actions.\n  startPluginRunner()\n\n  // onPreInit\n  activity = reporter.activityTimer(`onPreInit`, {\n    parentSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPreInit`, { parentSpan: activity.span })\n  activity.end()\n\n  const cacheDirectory = `${program.directory}/.cache`\n  const publicDirectory = `${program.directory}/public`\n  const workerCacheDirectory = `${program.directory}/.cache/worker`\n\n  const cacheJsonDirExists = fs.existsSync(`${cacheDirectory}/json`)\n  const publicDirExists = fs.existsSync(publicDirectory)\n  const workerCacheDirExists = fs.existsSync(workerCacheDirectory)\n\n  // For builds in case public dir exists, but cache doesn't, we need to clean up potentially stale\n  // artifacts from previous builds (due to cache not being available, we can't rely on tracking of artifacts)\n  if (\n    process.env.NODE_ENV === `production` &&\n    publicDirExists &&\n    !cacheJsonDirExists\n  ) {\n    activity = reporter.activityTimer(\n      `delete html and css files from previous builds`,\n      {\n        parentSpan,\n      }\n    )\n    activity.start()\n    await del([\n      `public/**/*.{html,css}`,\n      `!public/page-data/**/*`,\n      `!public/static`,\n      `!public/static/**/*.{html,css}`,\n    ])\n    activity.end()\n  }\n\n  // When the main process and workers communicate they save parts of their redux state to .cache/worker\n  // We should clean this directory to remove stale files that a worker might accidentally reuse then\n  if (\n    workerCacheDirExists &&\n    process.env.GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING\n  ) {\n    activity = reporter.activityTimer(\n      `delete worker cache from previous builds`,\n      {\n        parentSpan,\n      }\n    )\n    activity.start()\n    await fs\n      .remove(workerCacheDirectory)\n      .catch(() => fs.emptyDir(workerCacheDirectory))\n    activity.end()\n  }\n\n  activity = reporter.activityTimer(`initialize cache`, {\n    parentSpan,\n  })\n  activity.start()\n  // Check if any plugins have been updated since our last run. If so\n  // we delete the cache is there's likely been changes\n  // since the previous run.\n  //\n  // We do this by creating a hash of all the version numbers of installed\n  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.\n  // The last, gatsby-node.js, is important as many gatsby sites put important\n  // logic in there e.g. generating slugs for custom pages.\n  const pluginVersions = flattenedPlugins.map(p => p.version)\n  const hashes: any = await Promise.all([\n    md5File(`package.json`),\n    md5File(`${program.directory}/gatsby-config.js`).catch(() => {}), // ignore as this file isn't required),\n    md5File(`${program.directory}/gatsby-node.js`).catch(() => {}), // ignore as this file isn't required),\n  ])\n  const pluginsHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pluginVersions.concat(hashes)))\n    .digest(`hex`)\n  const state = store.getState()\n  const oldPluginsHash = state && state.status ? state.status.PLUGINS_HASH : ``\n\n  // Check if anything has changed. If it has, delete the site's .cache\n  // directory and tell reducers to empty themselves.\n  //\n  // Also if the hash isn't there, then delete things just in case something\n  // is weird.\n  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {\n    reporter.info(reporter.stripIndent`\n      One or more of your plugins have changed since the last time you ran Gatsby. As\n      a precaution, we're deleting your site's cache to ensure there's no stale data.\n    `)\n  }\n\n  // .cache directory exists in develop at this point\n  // so checking for .cache/json as a heuristic (could be any expected file)\n  const cacheIsCorrupt = cacheJsonDirExists && !publicDirExists\n\n  if (cacheIsCorrupt) {\n    reporter.info(reporter.stripIndent`\n      We've detected that the Gatsby cache is incomplete (the .cache directory exists\n      but the public directory does not). As a precaution, we're deleting your site's\n      cache to ensure there's no stale data.\n    `)\n  }\n\n  if (!oldPluginsHash || pluginsHash !== oldPluginsHash || cacheIsCorrupt) {\n    try {\n      // Comment out inviet until we can test perf impact\n      //\n      // let sourceFileSystemVersion = flattenedPlugins.find(\n      // plugin => plugin.name === `gatsby-source-filesystem`\n      // )?.version\n\n      // // The site might be using a plugin which uses \"createRemoteFileNode\" but\n      // // doesn't have gatsby-source-filesystem in their gatsby-config.js. So lets\n      // // also try requiring it.\n      // if (!sourceFileSystemVersion) {\n      // try {\n      // sourceFileSystemVersion = require(`gatsby-source-filesystem/package.json`)\n      // ?.version\n      // } catch {\n      // // ignore require errors\n      // }\n      // }\n      // } else if (\n      // sourceFileSystemVersion &&\n      // semver.lt(sourceFileSystemVersion, `2.9.0`)\n      // ) {\n      // // If the site has more than 50 downloaded files in it, tell them\n      // // how to save time.\n      // try {\n      // // Divide by two as the directory as both cache files + the actual downloaded files so\n      // // two results / downloaded file.\n      // const filesCount =\n      // (await fs.readdir(`.cache/caches/gatsby-source-filesystem`))\n      // .length / 2\n      // if (filesCount > 50) {\n      // reporter.info(stripIndent`\\n\\n\n\n      // Your local development experience is about to get better, faster, and stronger!\n\n      // Your friendly Gatsby maintainers detected your site downloads quite a few files and that we're about to delete all ${Math.round(\n      // filesCount\n      // )} of them 😅. We're working right now to make our caching smarter which means we won't delete your downloaded files any more.\n\n      // If you're interested in trialing the new caching behavior *today* — which should make your local development environment faster, go ahead and enable the PRESERVE_FILE_DOWNLOAD_CACHE flag and run your develop server again.\n\n      // To do so, add to your gatsby-config.js:\n\n      // flags: {\n      // preserve_file_download_cache: true,\n      // }\n\n      // visit the umbrella issue to learn more: https://github.com/gatsbyjs/gatsby/discussions/28331\n      // `)\n      // }\n      // } catch {\n      // // ignore errors (mostly will just be directory not found).\n      // }\n      // }\n\n      if (\n        process.env.GATSBY_EXPERIMENTAL_PRESERVE_FILE_DOWNLOAD_CACHE ||\n        process.env.GATSBY_EXPERIMENTAL_PRESERVE_WEBPACK_CACHE\n      ) {\n        const deleteGlobs = [\n          // By default delete all files & subdirectories\n          `${cacheDirectory}/**`,\n          `${cacheDirectory}/*/`,\n        ]\n\n        if (process.env.GATSBY_EXPERIMENTAL_PRESERVE_FILE_DOWNLOAD_CACHE) {\n          // Stop the caches directory from being deleted, add all sub directories,\n          // but remove gatsby-source-filesystem\n          deleteGlobs.push(`!${cacheDirectory}/caches`)\n          deleteGlobs.push(`${cacheDirectory}/caches/*`)\n          deleteGlobs.push(`!${cacheDirectory}/caches/gatsby-source-filesystem`)\n        }\n\n        if (process.env.GATSBY_EXPERIMENTAL_PRESERVE_WEBPACK_CACHE) {\n          // Add webpack\n          deleteGlobs.push(`!${cacheDirectory}/webpack`)\n        }\n        await del(deleteGlobs)\n      } else {\n        // Attempt to empty dir if remove fails,\n        // like when directory is mount point\n        await fs.remove(cacheDirectory).catch(() => fs.emptyDir(cacheDirectory))\n      }\n    } catch (e) {\n      reporter.error(`Failed to remove .cache files.`, e)\n    }\n    // Tell reducers to delete their data (the store will already have\n    // been loaded from the file system cache).\n    store.dispatch({\n      type: `DELETE_CACHE`,\n      cacheIsCorrupt,\n    })\n\n    // in future this should show which plugin's caches are purged\n    // possibly should also have which plugins had caches\n    telemetry.decorateEvent(`BUILD_END`, {\n      pluginCachesPurged: [`*`],\n    })\n    telemetry.decorateEvent(`DEVELOP_STOP`, {\n      pluginCachesPurged: [`*`],\n    })\n  }\n\n  // Update the store with the new plugins hash.\n  store.dispatch({\n    type: `UPDATE_PLUGINS_HASH`,\n    payload: pluginsHash,\n  })\n\n  // Now that we know the .cache directory is safe, initialize the cache\n  // directory.\n  await fs.ensureDir(cacheDirectory)\n\n  // Ensure the public/static directory\n  await fs.ensureDir(`${publicDirectory}/static`)\n\n  // Init plugins once cache is initialized\n  await apiRunnerNode(`unstable_onPluginInit`)\n\n  activity.end()\n\n  activity = reporter.activityTimer(`copy gatsby files`, {\n    parentSpan,\n  })\n  activity.start()\n  const srcDir = `${__dirname}/../../cache-dir`\n  const siteDir = cacheDirectory\n  const tryRequire = `${__dirname}/../utils/test-require-error.js`\n  try {\n    await fs.copy(srcDir, siteDir)\n    await fs.copy(tryRequire, `${siteDir}/test-require-error.js`)\n    await fs.ensureDirSync(`${cacheDirectory}/json`)\n\n    // Ensure .cache/fragments exists and is empty. We want fragments to be\n    // added on every run in response to data as fragments can only be added if\n    // the data used to create the schema they're dependent on is available.\n    await fs.emptyDir(`${cacheDirectory}/fragments`)\n  } catch (err) {\n    reporter.panic(`Unable to copy site files to .cache`, err)\n  }\n\n  // Find plugins which implement gatsby-browser and gatsby-ssr and write\n  // out api-runners for them.\n  const hasAPIFile = (env, plugin): string | undefined => {\n    // The plugin loader has disabled SSR APIs for this plugin. Usually due to\n    // multiple implementations of an API that can only be implemented once\n    if (env === `ssr` && plugin.skipSSR === true) return undefined\n\n    const envAPIs = plugin[`${env}APIs`]\n\n    // Always include gatsby-browser.js files if they exist as they're\n    // a handy place to include global styles and other global imports.\n    try {\n      if (env === `browser`) {\n        return slash(\n          require.resolve(path.join(plugin.resolve, `gatsby-${env}`))\n        )\n      }\n    } catch (e) {\n      // ignore\n    }\n\n    if (envAPIs && Array.isArray(envAPIs) && envAPIs.length > 0) {\n      return slash(path.join(plugin.resolve, `gatsby-${env}`))\n    }\n    return undefined\n  }\n\n  const isResolved = (plugin): plugin is IPluginResolution => !!plugin.resolve\n  const isResolvedSSR = (plugin): plugin is IPluginResolutionSSR =>\n    !!plugin.resolve\n\n  const ssrPlugins: Array<IPluginResolutionSSR> = flattenedPlugins\n    .map(plugin => {\n      return {\n        name: plugin.name,\n        resolve: hasAPIFile(`ssr`, plugin),\n        options: plugin.pluginOptions,\n      }\n    })\n    .filter(isResolvedSSR)\n\n  const browserPlugins: Array<IPluginResolution> = flattenedPlugins\n    .map(plugin => {\n      return {\n        resolve: hasAPIFile(`browser`, plugin),\n        options: plugin.pluginOptions,\n      }\n    })\n    .filter(isResolved)\n\n  const browserPluginsRequires = browserPlugins\n    .map(plugin => {\n      // we need a relative import path to keep contenthash the same if directory changes\n      const relativePluginPath = path.relative(siteDir, plugin.resolve)\n      return `{\n      plugin: require('${slash(relativePluginPath)}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    })\n    .join(`,`)\n\n  const browserAPIRunner = `module.exports = [${browserPluginsRequires}]\\n`\n\n  let sSRAPIRunner = ``\n\n  try {\n    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)\n  } catch (err) {\n    reporter.panic(`Failed to read ${siteDir}/api-runner-ssr.js`, err)\n  }\n\n  const ssrPluginsRequires = ssrPlugins\n    .map(\n      plugin =>\n        `{\n      name: '${plugin.name}',\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\\n${sSRAPIRunner}`\n\n  fs.writeFileSync(\n    `${siteDir}/api-runner-browser-plugins.js`,\n    browserAPIRunner,\n    `utf-8`\n  )\n  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)\n\n  activity.end()\n  /**\n   * Start the main bootstrap processes.\n   */\n\n  // onPreBootstrap\n  activity = reporter.activityTimer(`onPreBootstrap`, {\n    parentSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPreBootstrap`, {\n    parentSpan: activity.span,\n  })\n  activity.end()\n\n  // Collect resolvable extensions and attach to program.\n  const extensions = [`.mjs`, `.js`, `.jsx`, `.wasm`, `.json`]\n  // Change to this being an action and plugins implement `onPreBootstrap`\n  // for adding extensions.\n  const apiResults = await apiRunnerNode(`resolvableExtensions`, {\n    traceId: `initial-resolvableExtensions`,\n    parentSpan,\n  })\n\n  store.dispatch({\n    type: `SET_PROGRAM_EXTENSIONS`,\n    payload: _.flattenDeep([extensions, apiResults]),\n  })\n\n  const workerPool = WorkerPool.create()\n\n  return {\n    store,\n    workerPool,\n  }\n}\n"],"file":"initialize.js"}