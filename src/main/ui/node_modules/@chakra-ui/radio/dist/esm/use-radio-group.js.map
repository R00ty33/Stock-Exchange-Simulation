{"version":3,"sources":["../../src/use-radio-group.ts"],"names":["useControllableProp","useId","isInputEvent","React","mergeRefs","useRadioGroup","props","onChange","onChangeProp","value","valueProp","defaultValue","name","nameProp","isNative","htmlProps","valueState","setValue","useState","isControlled","ref","useRef","focus","useCallback","rootNode","current","query","firstEnabledAndCheckedInput","querySelector","firstEnabledInput","fallbackName","undefined","eventOrValue","nextValue","target","String","getRootProps","forwardedRef","role","getRadioProps","checkedKey"],"mappings":"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","sourcesContent":["import { useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport { StringOrNumber, isInputEvent } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\n\ntype EventOrValue = React.ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: StringOrNumber\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: string): void\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\ntype RadioPropGetter = PropGetter<\n  HTMLInputElement,\n  { onChange?: (e: EventOrValue) => void; value?: StringOrNumber } & Omit<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    \"onChange\" | \"size\" | \"value\"\n  >\n>\n\n/**\n * React hook to manage a group of radio inputs\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = React.useState<StringOrNumber>(\n    defaultValue || \"\",\n  )\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const ref = React.useRef<any>(null)\n\n  const focus = React.useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const fallbackName = useId(undefined, `radio`)\n  const name = nameProp || fallbackName\n\n  const onChange = React.useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(String(nextValue))\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\",\n    }),\n    [],\n  )\n\n  const getRadioProps: RadioPropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: value != null ? props.value === value : undefined,\n        onChange,\n        \"data-radiogroup\": true,\n      }\n    },\n    [isNative, name, onChange, value],\n  )\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"],"file":"use-radio-group.js"}