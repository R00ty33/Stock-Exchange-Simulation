{"version":3,"sources":["../../src/use-slider.ts"],"names":["useSlider","props","min","max","onChange","valueProp","value","defaultValue","isReversed","orientation","idProp","id","isDisabled","isReadOnly","onChangeStartProp","onChangeStart","onChangeEndProp","onChangeEnd","step","getAriaValueTextProp","getAriaValueText","ariaValueText","ariaLabel","ariaLabelledBy","name","focusThumbOnChange","htmlProps","getDefaultValue","computedValue","setValue","isDragging","setDragging","prevIsDragging","isFocused","setFocused","eventSourceRef","isInteractive","valueRef","prevRef","current","reversedValue","trackValue","trackPercent","isVertical","trackRef","thumbRef","rootRef","thumbId","trackId","getValueFromPointer","event","trackRect","borderBox","touches","clientX","clientY","diff","bottom","left","length","height","width","percent","nextValue","parseFloat","tenSteps","oneStep","constrain","actions","stepUp","next","stepDown","reset","stepTo","onKeyDown","eventKey","keyMap","ArrowRight","ArrowUp","ArrowLeft","ArrowDown","PageUp","PageDown","Home","End","action","preventDefault","stopPropagation","valueText","thumbBoxModel","thumbRect","thumbStyle","rootStyle","trackStyle","innerTrackStyle","focusThumb","setTimeout","setValueFromPointer","onPanSessionStart","on","onPanSessionEnd","off","onPanStart","onPan","onPanEnd","getRootProps","ref","tabIndex","style","getTrackProps","getInnerTrackProps","getThumbProps","role","undefined","onFocus","onBlur","getMarkerProps","isInRange","isHighlighted","markerPercent","markerStyle","position","pointerEvents","orient","vertical","horizontal","getInputProps","type","state","options"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useCallbackRef,\n  useControllableState,\n  useDimensions,\n  useIds,\n  useLatestRef,\n  usePanGesture,\n  usePrevious,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { EventKeyMap, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  AnyPointerEvent,\n  ariaAttr,\n  callAllHandlers,\n  clampValue,\n  dataAttr,\n  focus,\n  getBox,\n  normalizeEventKey,\n  percentToValue,\n  roundValueToStep,\n  valueToPercent,\n} from \"@chakra-ui/utils\"\nimport { CSSProperties, useCallback, useMemo, useRef } from \"react\"\nimport { getPartsStyle } from \"./slider-utils\"\n\nexport interface UseSliderProps {\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   * @default 100\n   */\n  max?: number\n  /**\n   * The step in which increments/decrements have to be made\n   * @default 1\n   */\n  step?: number\n  /**\n   * The value of the slider in controlled mode\n   */\n  value?: number\n  /**\n   * The initial value of the slider in uncontrolled mode\n   */\n  defaultValue?: number\n  /**\n   * orientation of the slider\n   * @default \"horizontal\"\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n  /**\n   * If `true`, the value will be incremented or decremented in reverse.\n   */\n  isReversed?: boolean\n  /**\n   * function gets called whenever the user starts dragging the slider handle\n   */\n  onChangeStart?(value: number): void\n  /**\n   * function gets called whenever the user stops dragging the slider handle.\n   */\n  onChangeEnd?(value: number): void\n  /**\n   * function gets called whenever the slider handle is being dragged or clicked\n   */\n  onChange?(value: number): void\n  /**\n   * The base `id` to use for the slider and its components\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms\n   */\n  name?: string\n  /**\n   * If `true`, the slider will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the slider will be in `read-only` state\n   */\n  isReadOnly?: boolean\n  /**\n   * Function that returns the `aria-valuetext` for screen readers.\n   * It is mostly used to generate a more human-readable\n   * representation of the value for assistive technologies\n   */\n  getAriaValueText?(value: number): string\n  /**\n   * If `false`, the slider handle will not capture focus when value changes.\n   * @default true\n   */\n  focusThumbOnChange?: boolean\n  /**\n   * The static string to use used for `aria-valuetext`\n   */\n  \"aria-valuetext\"?: string\n  /**\n   * The static string to use used for `aria-label`\n   * if no visible label is used.\n   */\n  \"aria-label\"?: string\n  /**\n   * The static string `aria-labelledby` that points to the\n   * ID of the element that serves as label for the slider\n   */\n  \"aria-labelledby\"?: string\n}\n\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#slider\n */\nexport function useSlider(props: UseSliderProps) {\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed,\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    ...htmlProps\n  } = props\n\n  const onChangeStart = useCallbackRef(onChangeStartProp)\n  const onChangeEnd = useCallbackRef(onChangeEndProp)\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  /**\n   * Enable the slider handle controlled and uncontrolled scenarios\n   */\n  const [computedValue, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue ?? getDefaultValue(min, max),\n    onChange,\n  })\n\n  const [isDragging, setDragging] = useBoolean()\n  const prevIsDragging = usePrevious(isDragging)\n\n  const [isFocused, setFocused] = useBoolean()\n  const eventSourceRef = useRef<\"pointer\" | \"keyboard\" | null>(null)\n\n  const isInteractive = !(isDisabled || isReadOnly)\n\n  /**\n   * Constrain the value because it can't be less than min\n   * or greater than max\n   */\n  const value = clampValue(computedValue, min, max)\n  const valueRef = useLatestRef(value)\n\n  const prevRef = useRef(valueRef.current)\n\n  const reversedValue = max - value + min\n  const trackValue = isReversed ? reversedValue : value\n  const trackPercent = valueToPercent(trackValue, min, max)\n\n  const isVertical = orientation === \"vertical\"\n\n  /**\n   * Let's keep a reference to the slider track and thumb\n   */\n  const trackRef = useRef<any>(null)\n  const thumbRef = useRef<any>(null)\n  const rootRef = useRef<any>(null)\n\n  /**\n   * Generate unique ids for component parts\n   */\n  const [thumbId, trackId] = useIds(idProp, `slider-thumb`, `slider-track`)\n\n  /**\n   * Get relative value of slider from the event by tracking\n   * how far you clicked within the track to determine the value\n   *\n   * @todo - Refactor this later on to use info from pan session\n   */\n\n  const getValueFromPointer = useCallback(\n    (event) => {\n      if (!trackRef.current) return\n      eventSourceRef.current = \"pointer\"\n      const trackRect = getBox(trackRef.current).borderBox\n      const { clientX, clientY } = event.touches?.[0] ?? event\n\n      const diff = isVertical\n        ? trackRect.bottom - clientY\n        : clientX - trackRect.left\n\n      const length = isVertical ? trackRect.height : trackRect.width\n      let percent = diff / length\n\n      if (isReversed) {\n        percent = 1 - percent\n      }\n\n      let nextValue = percentToValue(percent, min, max)\n\n      if (step) {\n        nextValue = parseFloat(roundValueToStep(nextValue, min, step))\n      }\n\n      nextValue = clampValue(nextValue, min, max)\n\n      return nextValue\n    },\n    [isVertical, isReversed, max, min, step],\n  )\n\n  const tenSteps = (max - min) / 10\n  const oneStep = step || (max - min) / 100\n\n  const constrain = useCallback(\n    (value: number) => {\n      if (!isInteractive) return\n      value = parseFloat(roundValueToStep(value, min, oneStep))\n      value = clampValue(value, min, max)\n      setValue(value)\n    },\n    [oneStep, max, min, setValue, isInteractive],\n  )\n\n  const actions = useMemo(\n    () => ({\n      stepUp: (step = oneStep) => {\n        const next = isReversed ? value - step : value + step\n        constrain(next)\n      },\n      stepDown: (step = oneStep) => {\n        const next = isReversed ? value + step : value - step\n        constrain(next)\n      },\n      reset: () => constrain(defaultValue || 0),\n      stepTo: (value: number) => constrain(value),\n    }),\n    [constrain, isReversed, value, oneStep, defaultValue],\n  )\n\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        ArrowRight: () => actions.stepUp(),\n        ArrowUp: () => actions.stepUp(),\n        ArrowLeft: () => actions.stepDown(),\n        ArrowDown: () => actions.stepDown(),\n        PageUp: () => actions.stepUp(tenSteps),\n        PageDown: () => actions.stepDown(tenSteps),\n        Home: () => constrain(min),\n        End: () => constrain(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n        eventSourceRef.current = \"keyboard\"\n      }\n    },\n    [actions, constrain, max, min, tenSteps],\n  )\n\n  /**\n   * ARIA (Optional): To define a human readable representation of the value,\n   * we allow users pass aria-valuetext.\n   */\n  const valueText = getAriaValueText?.(value) ?? ariaValueText\n\n  /**\n   * Measure the dimensions of the thumb so\n   * we can center it within the track properly\n   */\n  const thumbBoxModel = useDimensions(thumbRef)\n\n  /**\n   * Compute styles for all component parts.\n   */\n  const { thumbStyle, rootStyle, trackStyle, innerTrackStyle } = useMemo(() => {\n    const thumbRect = thumbBoxModel?.borderBox ?? { width: 0, height: 0 }\n    return getPartsStyle({\n      isReversed,\n      orientation,\n      thumbRect,\n      trackPercent,\n    })\n  }, [isReversed, orientation, thumbBoxModel?.borderBox, trackPercent])\n\n  const focusThumb = useCallback(() => {\n    if (thumbRef.current && focusThumbOnChange) {\n      setTimeout(() => focus(thumbRef.current))\n    }\n  }, [focusThumbOnChange])\n\n  useUpdateEffect(() => {\n    focusThumb()\n    if (eventSourceRef.current === \"keyboard\") {\n      onChangeEndProp?.(valueRef.current)\n    }\n  }, [value, onChangeEndProp])\n\n  const setValueFromPointer = (event: AnyPointerEvent) => {\n    const nextValue = getValueFromPointer(event)\n    if (nextValue != null && nextValue !== valueRef.current) {\n      setValue(nextValue)\n    }\n  }\n\n  usePanGesture(rootRef, {\n    onPanSessionStart(event) {\n      if (!isInteractive) return\n      setDragging.on()\n      focusThumb()\n      setValueFromPointer(event)\n    },\n    onPanSessionEnd() {\n      if (!isInteractive) return\n      setDragging.off()\n      if (!prevIsDragging && prevRef.current !== valueRef.current) {\n        onChangeEnd?.(valueRef.current)\n        prevRef.current = valueRef.current\n      }\n    },\n    onPanStart() {\n      if (!isInteractive) return\n      onChangeStart?.(valueRef.current)\n    },\n    onPan(event) {\n      if (!isInteractive) return\n      setValueFromPointer(event)\n    },\n    onPanEnd() {\n      if (!isInteractive) return\n      onChangeEnd?.(valueRef.current)\n    },\n  })\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: {\n        ...props.style,\n        ...rootStyle,\n      },\n    }),\n    [htmlProps, isDisabled, isFocused, rootStyle],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, trackRef),\n      id: trackId,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: {\n        ...props.style,\n        ...trackStyle,\n      },\n    }),\n    [isDisabled, trackId, trackStyle],\n  )\n\n  const getInnerTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      style: {\n        ...props.style,\n        ...innerTrackStyle,\n      },\n    }),\n    [innerTrackStyle],\n  )\n\n  const getThumbProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, thumbRef),\n      role: \"slider\",\n      tabIndex: isInteractive ? 0 : undefined,\n      id: thumbId,\n      \"data-active\": dataAttr(isDragging),\n      \"aria-valuetext\": valueText,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": value,\n      \"aria-orientation\": orientation,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabel ? undefined : ariaLabelledBy,\n      style: {\n        ...props.style,\n        ...thumbStyle,\n      },\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n    }),\n    [\n      ariaLabel,\n      ariaLabelledBy,\n      isDisabled,\n      isDragging,\n      isReadOnly,\n      isInteractive,\n      max,\n      min,\n      onKeyDown,\n      orientation,\n      setFocused.off,\n      setFocused.on,\n      thumbId,\n      thumbStyle,\n      value,\n      valueText,\n    ],\n  )\n\n  const getMarkerProps: PropGetter<any, { value?: any }> = useCallback(\n    (props = {}, ref = null) => {\n      const isInRange = !(props.value < min || props.value > max)\n      const isHighlighted = value >= props.value\n      const markerPercent = valueToPercent(props.value, min, max)\n\n      const markerStyle: React.CSSProperties = {\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        ...orient({\n          orientation,\n          vertical: {\n            bottom: isReversed\n              ? `${100 - markerPercent}%`\n              : `${markerPercent}%`,\n          },\n          horizontal: {\n            left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`,\n          },\n        }),\n      }\n\n      return {\n        ...props,\n        ref,\n        role: \"presentation\",\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(!isInRange),\n        \"data-highlighted\": dataAttr(isHighlighted),\n        style: {\n          ...props.style,\n          ...markerStyle,\n        },\n      }\n    },\n    [isDisabled, isReversed, max, min, orientation, value],\n  )\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      type: \"hidden\",\n      value,\n      name,\n    }),\n    [name, value],\n  )\n\n  return {\n    state: {\n      value,\n      isFocused,\n      isDragging,\n    },\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps,\n  }\n}\n\nexport type UseSliderReturn = ReturnType<typeof useSlider>\n\nfunction orient(options: {\n  orientation: UseSliderProps[\"orientation\"]\n  vertical: CSSProperties\n  horizontal: CSSProperties\n}) {\n  const { orientation, vertical, horizontal } = options\n  return orientation === \"vertical\" ? vertical : horizontal\n}\n\n/**\n * The browser <input type=\"range\" /> calculates\n * the default value of a slider by using mid-point\n * between the min and the max.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range\n */\nfunction getDefaultValue(min: number, max: number) {\n  return max < min ? min : min + (max - min) / 2\n}\n"],"file":"use-slider.js"}