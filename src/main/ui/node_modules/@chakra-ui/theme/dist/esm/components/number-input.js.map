{"version":3,"sources":["../../../src/components/number-input.ts"],"names":["mode","Input","typography","parts","variants","defaultProps","baseStyleRoot","baseStyleField","baseStyle","field","baseStyleStepperGroup","width","baseStyleStepper","props","borderStart","borderStartColor","color","_active","bg","_disabled","opacity","cursor","root","stepperGroup","stepper","getSize","size","sizeStyle","sizes","radius","lg","md","sm","xs","resolvedFontSize","fontSizes","fontSize","paddingInlineEnd","verticalAlign","_first","borderTopEndRadius","_last","borderBottomEndRadius","mt","borderTopWidth"],"mappings":"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","sourcesContent":["import { mode } from \"@chakra-ui/theme-tools\"\nimport Input from \"./input\"\nimport typography from \"../foundations/typography\"\n\nconst parts = [\"root\", \"field\", \"stepper\", \"stepperGroup\"]\n\nconst { variants, defaultProps } = Input\n\nconst baseStyleRoot = {\n  \"--number-input-stepper-width\": \"24px\",\n  \"--number-input-field-padding\":\n    \"calc(var(--number-input-stepper-width) + 0.5rem)\",\n}\n\nconst baseStyleField = Input.baseStyle?.field\n\nconst baseStyleStepperGroup = {\n  width: \"var(--number-input-stepper-width)\",\n}\n\nfunction baseStyleStepper(props: Record<string, any>) {\n  return {\n    borderStart: \"1px solid\",\n    borderStartColor: mode(\"inherit\", \"whiteAlpha.300\")(props),\n    color: mode(\"inherit\", \"whiteAlpha.800\")(props),\n    _active: {\n      bg: mode(\"gray.200\", \"whiteAlpha.300\")(props),\n    },\n    _disabled: {\n      opacity: 0.4,\n      cursor: \"not-allowed\",\n    },\n  }\n}\n\nconst baseStyle = (props: Record<string, any>) => ({\n  root: baseStyleRoot,\n  field: baseStyleField,\n  stepperGroup: baseStyleStepperGroup,\n  stepper: baseStyleStepper(props),\n})\n\nfunction getSize(size: \"xs\" | \"sm\" | \"md\" | \"lg\") {\n  const sizeStyle = Input.sizes[size]\n\n  const radius = {\n    lg: \"md\",\n    md: \"md\",\n    sm: \"sm\",\n    xs: \"sm\",\n  }\n\n  const resolvedFontSize = typography.fontSizes[sizeStyle.field.fontSize]\n\n  return {\n    field: {\n      ...sizeStyle.field,\n      paddingInlineEnd: \"var(--number-input-field-padding)\",\n      verticalAlign: \"top\",\n    },\n    stepper: {\n      fontSize: `calc(${resolvedFontSize} * 0.75)`,\n      _first: {\n        borderTopEndRadius: radius[size],\n      },\n      _last: {\n        borderBottomEndRadius: radius[size],\n        mt: \"-1px\",\n        borderTopWidth: 1,\n      },\n    },\n  }\n}\n\nconst sizes = {\n  xs: getSize(\"xs\"),\n  sm: getSize(\"sm\"),\n  md: getSize(\"md\"),\n  lg: getSize(\"lg\"),\n}\n\nexport default {\n  parts,\n  baseStyle,\n  sizes,\n  variants,\n  defaultProps,\n}\n"],"file":"number-input.js"}