declare const _default: {
    parts: string[];
    baseStyle: (props: Record<string, any>) => {
        root: {
            "--number-input-stepper-width": string;
            "--number-input-field-padding": string;
        };
        field: {
            width: string;
            minWidth: number;
            outline: number;
            position: string;
            appearance: string;
            transitionProperty: string;
            transitionDuration: string;
        };
        stepperGroup: {
            width: string;
        };
        stepper: {
            borderStart: string;
            borderStartColor: any;
            color: any;
            _active: {
                bg: any;
            };
            _disabled: {
                opacity: number;
                cursor: string;
            };
        };
    };
    sizes: {
        xs: {
            field: {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
            stepper: {
                fontSize: string;
                _first: {
                    borderTopEndRadius: string;
                };
                _last: {
                    borderBottomEndRadius: string;
                    mt: string;
                    borderTopWidth: number;
                };
            };
        };
        sm: {
            field: {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
            stepper: {
                fontSize: string;
                _first: {
                    borderTopEndRadius: string;
                };
                _last: {
                    borderBottomEndRadius: string;
                    mt: string;
                    borderTopWidth: number;
                };
            };
        };
        md: {
            field: {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
            stepper: {
                fontSize: string;
                _first: {
                    borderTopEndRadius: string;
                };
                _last: {
                    borderBottomEndRadius: string;
                    mt: string;
                    borderTopWidth: number;
                };
            };
        };
        lg: {
            field: {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            } | {
                paddingInlineEnd: string;
                verticalAlign: string;
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
            stepper: {
                fontSize: string;
                _first: {
                    borderTopEndRadius: string;
                };
                _last: {
                    borderBottomEndRadius: string;
                    mt: string;
                    borderTopWidth: number;
                };
            };
        };
    };
    variants: {
        outline: (props: Record<string, any>) => {
            field: {
                border: string;
                borderColor: string;
                bg: string;
                _hover: {
                    borderColor: any;
                };
                _readOnly: {
                    boxShadow: string;
                    userSelect: string;
                };
                _disabled: {
                    opacity: number;
                    cursor: string;
                };
                _invalid: {
                    borderColor: any;
                    boxShadow: string;
                };
                _focus: {
                    zIndex: number;
                    borderColor: any;
                    boxShadow: string;
                };
            };
            addon: {
                border: string;
                borderColor: any;
                bg: any;
            };
        };
        filled: (props: Record<string, any>) => {
            field: {
                border: string;
                borderColor: string;
                bg: any;
                _hover: {
                    bg: any;
                };
                _readOnly: {
                    boxShadow: string;
                    userSelect: string;
                };
                _disabled: {
                    opacity: number;
                    cursor: string;
                };
                _invalid: {
                    borderColor: any;
                };
                _focus: {
                    bg: string;
                    borderColor: any;
                };
            };
            addon: {
                border: string;
                borderColor: string;
                bg: any;
            };
        };
        flushed: (props: Record<string, any>) => {
            field: {
                borderBottom: string;
                borderColor: string;
                borderRadius: number;
                px: number;
                bg: string;
                _readOnly: {
                    boxShadow: string;
                    userSelect: string;
                };
                _invalid: {
                    borderColor: any;
                    boxShadow: string;
                };
                _focus: {
                    borderColor: any;
                    boxShadow: string;
                };
            };
            addon: {
                borderBottom: string;
                borderColor: string;
                borderRadius: number;
                px: number;
                bg: string;
            };
        };
        unstyled: {
            field: {
                bg: string;
                px: number;
                height: string;
            };
            addon: {
                bg: string;
                px: number;
                height: string;
            };
        };
    };
    defaultProps: {
        size: string;
        variant: string;
    };
};
export default _default;
//# sourceMappingURL=number-input.d.ts.map