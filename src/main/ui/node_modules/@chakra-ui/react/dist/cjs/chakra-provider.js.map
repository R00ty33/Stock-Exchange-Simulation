{"version":3,"sources":["../../src/chakra-provider.tsx"],"names":["ChakraProvider","props","children","colorModeManager","portalZIndex","resetCSS","theme","defaultTheme","environment","cssVarsRoot","_children","config"],"mappings":";;;;;AAAA;;AACA;;AACA;;AAOA;;AAEA;;AAIA;;AACA;;;;;;;;AA4CA;AACA;AACA;AACA;AACO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAgC;AAAA,MAE1DC,QAF0D,GASxDD,KATwD,CAE1DC,QAF0D;AAAA,MAG1DC,gBAH0D,GASxDF,KATwD,CAG1DE,gBAH0D;AAAA,MAI1DC,YAJ0D,GASxDH,KATwD,CAI1DG,YAJ0D;AAAA,wBASxDH,KATwD,CAK1DI,QAL0D;AAAA,MAK1DA,QAL0D,gCAK/C,IAL+C;AAAA,qBASxDJ,KATwD,CAM1DK,KAN0D;AAAA,MAM1DA,KAN0D,6BAMlDC,iBANkD;AAAA,MAO1DC,WAP0D,GASxDP,KATwD,CAO1DO,WAP0D;AAAA,MAQ1DC,WAR0D,GASxDR,KATwD,CAQ1DQ,WAR0D;;AAW5D,MAAMC,SAAS,gBACb,oBAAC,6BAAD;AAAqB,IAAA,WAAW,EAAEF;AAAlC,KACGN,QADH,CADF;;AAMA,sBACE,oBAAC,iBAAD,qBACE,oBAAC,qBAAD;AAAe,IAAA,KAAK,EAAEI,KAAtB;AAA6B,IAAA,WAAW,EAAEG;AAA1C,kBACE,oBAAC,yBAAD;AACE,IAAA,gBAAgB,EAAEN,gBADpB;AAEE,IAAA,OAAO,EAAEG,KAAK,CAACK;AAFjB,KAIGN,QAAQ,iBAAI,oBAAC,oBAAD,OAJf,eAKE,oBAAC,mBAAD,OALF,EAMGD,YAAY,gBACX,oBAAC,qBAAD;AAAe,IAAA,MAAM,EAAEA;AAAvB,KAAsCM,SAAtC,CADW,GAGXA,SATJ,CADF,CADF,CADF;AAkBD,CAnCM","sourcesContent":["import CSSReset from \"@chakra-ui/css-reset\"\nimport { PortalManager } from \"@chakra-ui/portal\"\nimport {\n  ColorModeProvider,\n  ColorModeProviderProps,\n  GlobalStyle,\n  ThemeProvider,\n  ThemeProviderProps,\n} from \"@chakra-ui/system\"\nimport defaultTheme from \"@chakra-ui/theme\"\nimport { Dict } from \"@chakra-ui/utils\"\nimport {\n  EnvironmentProvider,\n  EnvironmentProviderProps,\n} from \"@chakra-ui/react-env\"\nimport * as React from \"react\"\nimport { IdProvider } from \"@chakra-ui/hooks\"\n\nexport interface ChakraProviderProps\n  extends Pick<ThemeProviderProps, \"cssVarsRoot\"> {\n  /**\n   * a theme. if omitted, uses the default theme provided by chakra\n   */\n  theme?: Dict\n  /**\n   * Common z-index to use for `Portal`\n   *\n   * @default undefined\n   */\n  portalZIndex?: number\n  /**\n   * If `true`, `CSSReset` component will be mounted to help\n   * you reset browser styles\n   *\n   * @default true\n   */\n  resetCSS?: boolean\n  /**\n   * manager to persist a users color mode preference in\n   *\n   * omit if you don't render server-side\n   * for SSR: choose `cookieStorageManager`\n   *\n   * @default localStorageManager\n   */\n  colorModeManager?: ColorModeProviderProps[\"colorModeManager\"]\n  /**\n   * Your application content\n   */\n  children?: React.ReactNode\n  /**\n   * The environment (`window` and `document`) to be used by\n   * all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `ChakraProvider` is rendered.\n   */\n  environment?: EnvironmentProviderProps[\"environment\"]\n}\n\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\nexport const ChakraProvider = (props: ChakraProviderProps) => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetCSS = true,\n    theme = defaultTheme,\n    environment,\n    cssVarsRoot,\n  } = props\n\n  const _children = (\n    <EnvironmentProvider environment={environment}>\n      {children}\n    </EnvironmentProvider>\n  )\n\n  return (\n    <IdProvider>\n      <ThemeProvider theme={theme} cssVarsRoot={cssVarsRoot}>\n        <ColorModeProvider\n          colorModeManager={colorModeManager}\n          options={theme.config}\n        >\n          {resetCSS && <CSSReset />}\n          <GlobalStyle />\n          {portalZIndex ? (\n            <PortalManager zIndex={portalZIndex}>{_children}</PortalManager>\n          ) : (\n            _children\n          )}\n        </ColorModeProvider>\n      </ThemeProvider>\n    </IdProvider>\n  )\n}\n"],"file":"chakra-provider.js"}