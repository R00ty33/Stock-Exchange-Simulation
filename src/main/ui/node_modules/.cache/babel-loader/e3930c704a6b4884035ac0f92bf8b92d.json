{"ast":null,"code":"/** \r\n * TSX\r\n * ASYNC\r\n * DESYNC\r\n */\nconst createTokenProvider = () => {\n  let _token = JSON.parse(localStorage.getItem('REACT_TOKEN_AUTH') || '') || null;\n  /* Implementation */\n\n\n  const getExpirationDate = jwtToken => {\n    if (!jwtToken) {\n      return null;\n    }\n\n    const jwt = JSON.parse(atob(jwtToken.split('.')[1])); // multiply by 1000 to convert seconds into milliseconds\n\n    return jwt && jwt.exp && jwt.exp * 1000 || null;\n  };\n\n  const isExpired = exp => {\n    if (!exp) {\n      return false;\n    }\n\n    return Date.now() > exp;\n  };\n\n  const getToken = async () => {\n    if (!_token) {\n      return null;\n    }\n\n    if (isExpired(getExpirationDate(_token.accessToken))) {\n      const updatedToken = await fetch('/update-token', {\n        method: 'POST',\n        body: _token.refreshToken\n      }).then(r => r.json()); //setToken(updatedToken);\n    }\n\n    return _token && _token.accessToken;\n  };\n\n  return {\n    getExpirationDate\n  };\n};","map":{"version":3,"sources":["C:/Users/Nrudo/Documents/gitHub_projects/Stock/src/main/ui/src/components/createTokenProvider.tsx"],"names":["createTokenProvider","_token","JSON","parse","localStorage","getItem","getExpirationDate","jwtToken","jwt","atob","split","exp","isExpired","Date","now","getToken","accessToken","updatedToken","fetch","method","body","refreshToken","then","r","json"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,mBAAmB,GAAG,MAAM;AAE9B,MAAIC,MAAqD,GACzDC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,kBAArB,KAA4C,EAAvD,KAA8D,IAD9D;AAEA;;;AACA,QAAMC,iBAAiB,GAAIC,QAAD,IAAsC;AAC5D,QAAI,CAACA,QAAL,EAAe;AACX,aAAO,IAAP;AACH;;AAED,UAAMC,GAAG,GAAGN,IAAI,CAACC,KAAL,CAAWM,IAAI,CAACF,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAD,CAAf,CAAZ,CAL4D,CAO5D;;AACA,WAAOF,GAAG,IAAIA,GAAG,CAACG,GAAX,IAAkBH,GAAG,CAACG,GAAJ,GAAU,IAA5B,IAAoC,IAA3C;AACH,GATD;;AAWA,QAAMC,SAAS,GAAID,GAAD,IAAkB;AAChC,QAAI,CAACA,GAAL,EAAU;AACN,aAAO,KAAP;AACH;;AAED,WAAOE,IAAI,CAACC,GAAL,KAAaH,GAApB;AACH,GAND;;AAQA,QAAMI,QAAQ,GAAG,YAAY;AACzB,QAAI,CAACd,MAAL,EAAa;AACT,aAAO,IAAP;AACH;;AAED,QAAIW,SAAS,CAACN,iBAAiB,CAACL,MAAM,CAACe,WAAR,CAAlB,CAAb,EAAsD;AAClD,YAAMC,YAAY,GAAG,MAAMC,KAAK,CAAC,eAAD,EAAkB;AAC9CC,QAAAA,MAAM,EAAE,MADsC;AAE9CC,QAAAA,IAAI,EAAEnB,MAAM,CAACoB;AAFiC,OAAlB,CAAL,CAItBC,IAJsB,CAIjBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAJY,CAA3B,CADkD,CAOlD;AACH;;AAED,WAAOvB,MAAM,IAAIA,MAAM,CAACe,WAAxB;AACH,GAhBD;;AAmBA,SAAO;AACHV,IAAAA;AADG,GAAP;AAGH,CA9CD","sourcesContent":["\r\n/** \r\n * TSX\r\n * ASYNC\r\n * DESYNC\r\n */\r\nconst createTokenProvider = () => {\r\n\r\n    let _token: { accessToken: string, refreshToken: string } = \r\n    JSON.parse(localStorage.getItem('REACT_TOKEN_AUTH') || '') || null;\r\n    /* Implementation */\r\n    const getExpirationDate = (jwtToken?: string): number | null => {\r\n        if (!jwtToken) {\r\n            return null;\r\n        }\r\n    \r\n        const jwt = JSON.parse(atob(jwtToken.split('.')[1]));\r\n    \r\n        // multiply by 1000 to convert seconds into milliseconds\r\n        return jwt && jwt.exp && jwt.exp * 1000 || null;\r\n    };\r\n\r\n    const isExpired = (exp?: number) => {\r\n        if (!exp) {\r\n            return false;\r\n        }\r\n    \r\n        return Date.now() > exp;\r\n    };\r\n\r\n    const getToken = async () => {\r\n        if (!_token) {\r\n            return null;\r\n        }\r\n    \r\n        if (isExpired(getExpirationDate(_token.accessToken))) {\r\n            const updatedToken = await fetch('/update-token', {\r\n                method: 'POST',\r\n                body: _token.refreshToken\r\n            })\r\n                .then(r => r.json());\r\n    \r\n            //setToken(updatedToken);\r\n        }\r\n    \r\n        return _token && _token.accessToken;\r\n    };\r\n\r\n\r\n    return {\r\n        getExpirationDate,\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}