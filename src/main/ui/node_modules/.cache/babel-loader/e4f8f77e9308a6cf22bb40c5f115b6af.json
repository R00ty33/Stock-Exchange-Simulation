{"ast":null,"code":"import React, { useState } from 'react';\nimport axios from 'axios'; // API \n\nconst StocksProvider = {\n  GetGME: function () {\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    console.log(\"yay\");\n    axios.get('http://localhost:8080/api/v1/stocks', config).then(response => {\n      console.log(response.status, response.data);\n    }).catch(err => {\n      console.log(\"Promise Rejected\", err.message);\n    });\n  }\n};\nexport default StocksProvider;","map":{"version":3,"sources":["C:/Users/Nrudo/Documents/gitHub_projects/Stock/src/main/ui/src/components/StocksProvider.js"],"names":["React","useState","axios","StocksProvider","GetGME","config","headers","console","log","get","then","response","status","data","catch","err","message"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAA2B;;AAE3B,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,YAAW;AACf,UAAMC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADE,KAAf;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAN,IAAAA,KAAK,CAACO,GAAN,CAAU,qCAAV,EAAiDJ,MAAjD,EACCK,IADD,CACOC,QAAD,IAAc;AAChBJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAQ,CAACC,MAArB,EAA4BD,QAAQ,CAACE,IAArC;AACH,KAHD,EAGGC,KAHH,CAGUC,GAAD,IAAS;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCO,GAAG,CAACC,OAApC;AACH,KALD;AAMH;AAdkB,CAAvB;AAiBA,eAAeb,cAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios'; // API \r\n\r\nconst StocksProvider = {\r\n    GetGME: function() {\r\n        const config = {\r\n            headers: {\r\n              'Content-Type': 'application/x-www-form-urlencoded'\r\n            }\r\n        }\r\n        console.log(\"yay\")\r\n        axios.get('http://localhost:8080/api/v1/stocks', config)\r\n        .then((response) => {\r\n            console.log(response.status,response.data);\r\n        }).catch((err) => {\r\n            console.log(\"Promise Rejected\", err.message);\r\n        })\r\n    },\r\n}\r\n\r\nexport default StocksProvider"]},"metadata":{},"sourceType":"module"}