{"ast":null,"code":"var lib = require('./lib');\n\nvar error = require('./constants').error;\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\n\n\nfunction _validateLength(num) {\n  const len = Number(num);\n\n  if (isNaN(len) || !Number.isInteger(len) || len < 1) {\n    throw new Error(error.length);\n  }\n}\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @return {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\n\n\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} func - Property name\n * @param {array} args - arguments for the func property\n */\n\n\nfunction _register(func, args) {\n  // Add property to the schema\n  this.properties.push({\n    method: func,\n    arguments: args\n  });\n  return this;\n}\n\nclass PasswordValidator {\n  /**\n   * Creates a password-validator schema\n   *\n   * @constructor\n   */\n  constructor() {\n    this.properties = [];\n  }\n  /**\n   * Method to validate the password against schema\n   *\n   * @param {string} pwd - password to valdiate\n   * @param {object} options - optional options to configure validation\n   * @param {boolean} [options.list] - asks for a list of validation\n   *           failures instead of just true/false\n   * @return {boolean|array} Boolean value indicting the validity\n   *           of the password as per schema, if 'options.list'\n   *           is not set. Otherwise, it returns an array of\n   *           property names which failed validations\n   */\n\n\n  validate(pwd, options) {\n    this.list = Boolean(options && options.list);\n    this.password = String(pwd);\n    this.positive = true;\n\n    if (this.list) {\n      return this.properties.reduce((errorList, property) => {\n        // Applies all validations defined in lib one by one\n        if (!_isPasswordValidFor.call(this, property)) {\n          // If the validation for a property fails,\n          // add it to the error list\n          return errorList.concat(property.method);\n        }\n\n        return errorList;\n      }, []);\n    }\n\n    return this.properties.every(_isPasswordValidFor.bind(this));\n  }\n  /**\n   * Rule to mandate the presence of letters in the password\n   *\n   * @param {number} [count] - minimum number of letters required\n   */\n\n\n  letters(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'letters', arguments);\n  }\n  /**\n   * Rule to mandate the presence of digits in the password\n   *\n   * @param {number} [count] - minimum number of digits required\n   */\n\n\n  digits(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'digits', arguments);\n  }\n  /**\n   * Rule to mandate the presence of symbols in the password\n   *\n   * @param {number} [count] - minimum number of symbols required\n   */\n\n\n  symbols(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'symbols', arguments);\n  }\n  /**\n   * Rule to specify a minimum length of the password\n   *\n   * @param {number} num - minimum length\n   */\n\n\n  min(num) {\n    _validateLength(num);\n\n    return _register.call(this, 'min', arguments);\n  }\n  /**\n   * Rule to specify a maximum length of the password\n   *\n   * @param {number} num - maximum length\n   */\n\n\n  max(num) {\n    _validateLength(num);\n\n    return _register.call(this, 'max', arguments);\n  }\n  /**\n   * Rule to mandate the presence of lowercase letters in the password\n   *\n   * @param {number} [count] - minimum number of lowercase letters required\n   */\n\n\n  lowercase(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'lowercase', arguments);\n  }\n  /**\n   * Rule to mandate the presence of uppercase letters in the password\n   *\n   * @param {number} [count] - minimum number of uppercase letters required\n   */\n\n\n  uppercase(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'uppercase', arguments);\n  }\n  /**\n   * Rule to mandate the presence of space in the password\n   * It can be used along with 'not' to not allow spaces\n   * in the password\n   *\n   * @param {number} [count] - minimum number of spaces required\n   */\n\n\n  spaces(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'spaces', arguments);\n  }\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'has' is also used\n   * to make the api readable and chainable\n   */\n\n\n  has() {\n    return _register.call(this, 'has', arguments);\n  }\n  /**\n   * Rule to invert the next applied rules.\n   * All the rules applied after 'not' will have opposite effect,\n   * until 'has' rule is applied\n   */\n\n\n  not() {\n    return _register.call(this, 'not', arguments);\n  }\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'is' is also used\n   * to make the api readable and chainable\n   */\n\n\n  is() {\n    return _register.call(this, 'is', arguments);\n  }\n  /**\n   * Rule to whitelist words to be used as password\n   *\n   * @param {array} list - list of values allowed\n   */\n\n\n  oneOf() {\n    return _register.call(this, 'oneOf', arguments);\n  }\n\n}\n\nmodule.exports = PasswordValidator;","map":{"version":3,"sources":["C:/Users/Nrudo/Documents/gitHub_projects/Stock/src/main/ui/node_modules/password-validator/src/index.js"],"names":["lib","require","error","_validateLength","num","len","Number","isNaN","isInteger","Error","length","_isPasswordValidFor","property","method","apply","arguments","_register","func","args","properties","push","PasswordValidator","constructor","validate","pwd","options","list","Boolean","password","String","positive","reduce","errorList","call","concat","every","bind","letters","count","digits","symbols","min","max","lowercase","uppercase","spaces","has","not","is","oneOf","module","exports"],"mappings":"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","sourcesContent":["var lib = require('./lib');\nvar error = require('./constants').error;\n\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\nfunction _validateLength(num) {\n  const len = Number(num);\n  if (isNaN(len) || !Number.isInteger(len) || len < 1) {\n    throw new Error(error.length);\n  }\n}\n\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @return {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} func - Property name\n * @param {array} args - arguments for the func property\n */\nfunction _register(func, args) {\n  // Add property to the schema\n  this.properties.push({ method: func, arguments: args });\n  return this;\n}\n\nclass PasswordValidator {\n  /**\n   * Creates a password-validator schema\n   *\n   * @constructor\n   */\n  constructor() {\n    this.properties = [];\n  }\n\n  /**\n   * Method to validate the password against schema\n   *\n   * @param {string} pwd - password to valdiate\n   * @param {object} options - optional options to configure validation\n   * @param {boolean} [options.list] - asks for a list of validation\n   *           failures instead of just true/false\n   * @return {boolean|array} Boolean value indicting the validity\n   *           of the password as per schema, if 'options.list'\n   *           is not set. Otherwise, it returns an array of\n   *           property names which failed validations\n   */\n  validate(pwd, options) {\n    this.list = Boolean(options && options.list);\n    this.password = String(pwd);\n\n    this.positive = true;\n\n    if (this.list) {\n      return this.properties.reduce((errorList, property) => {\n        // Applies all validations defined in lib one by one\n        if (!_isPasswordValidFor.call(this, property)) {\n          // If the validation for a property fails,\n          // add it to the error list\n          return errorList.concat(property.method);\n        }\n        return errorList;\n      }, []);\n    }\n    return this.properties.every(_isPasswordValidFor.bind(this));\n  }\n\n  /**\n   * Rule to mandate the presence of letters in the password\n   *\n   * @param {number} [count] - minimum number of letters required\n   */\n  letters(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'letters', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of digits in the password\n   *\n   * @param {number} [count] - minimum number of digits required\n   */\n  digits(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'digits', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of symbols in the password\n   *\n   * @param {number} [count] - minimum number of symbols required\n   */\n  symbols(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'symbols', arguments);\n  }\n\n  /**\n   * Rule to specify a minimum length of the password\n   *\n   * @param {number} num - minimum length\n   */\n  min(num) {\n    _validateLength(num);\n    return _register.call(this, 'min', arguments);\n  }\n\n  /**\n   * Rule to specify a maximum length of the password\n   *\n   * @param {number} num - maximum length\n   */\n  max(num) {\n    _validateLength(num);\n    return _register.call(this, 'max', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of lowercase letters in the password\n   *\n   * @param {number} [count] - minimum number of lowercase letters required\n   */\n  lowercase(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'lowercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of uppercase letters in the password\n   *\n   * @param {number} [count] - minimum number of uppercase letters required\n   */\n  uppercase(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'uppercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of space in the password\n   * It can be used along with 'not' to not allow spaces\n   * in the password\n   *\n   * @param {number} [count] - minimum number of spaces required\n   */\n  spaces(count) {\n    count && _validateLength(count);\n    return _register.call(this, 'spaces', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'has' is also used\n   * to make the api readable and chainable\n   */\n  has() {\n    return _register.call(this, 'has', arguments);\n  }\n\n  /**\n   * Rule to invert the next applied rules.\n   * All the rules applied after 'not' will have opposite effect,\n   * until 'has' rule is applied\n   */\n  not() {\n    return _register.call(this, 'not', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'is' is also used\n   * to make the api readable and chainable\n   */\n  is() {\n    return _register.call(this, 'is', arguments);\n  }\n\n  /**\n   * Rule to whitelist words to be used as password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf() {\n    return _register.call(this, 'oneOf', arguments);\n  }\n}\n\nmodule.exports = PasswordValidator;\n"]},"metadata":{},"sourceType":"script"}