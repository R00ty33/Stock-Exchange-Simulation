{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport tokenProvider from './TokenProvider';\nconst AuthProvider = {\n  login: function (newTokens) {\n    tokenProvider.setTokens(newTokens);\n  },\n  logout: function () {\n    tokenProvider.setTokens(null);\n  },\n  useAuth: _s(function () {\n    _s();\n\n    const [isLogged, setIsLogged] = useState(tokenProvider.isLoggedIn());\n    useEffect(() => {\n      const listener = newIsLogged => {\n        setIsLogged(newIsLogged);\n      };\n\n      tokenProvider.subscribe(listener);\n      return () => {\n        tokenProvider.unsubscribe(listener);\n      };\n    }, []);\n    return [isLogged];\n  }, \"Qc628ehA5dA8qnCHGt2tQaoYhx0=\")\n};\nexport default AuthProvider;","map":{"version":3,"sources":["C:/Users/Nrudo/Documents/gitHub_projects/Stock/src/main/ui/src/components/AuthProvider.js"],"names":["React","useState","useEffect","tokenProvider","AuthProvider","login","newTokens","setTokens","logout","useAuth","isLogged","setIsLogged","isLoggedIn","listener","newIsLogged","subscribe","unsubscribe"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,UAASC,SAAT,EAAoB;AACvBH,IAAAA,aAAa,CAACI,SAAd,CAAwBD,SAAxB;AACH,GAHgB;AAKjBE,EAAAA,MAAM,EAAE,YAAW;AACfL,IAAAA,aAAa,CAACI,SAAd,CAAwB,IAAxB;AACH,GAPgB;AASjBE,EAAAA,OAAO,KAAE,YAAW;AAAA;;AAChB,UAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACE,aAAa,CAACS,UAAd,EAAD,CAAxC;AAEAV,IAAAA,SAAS,CAAC,MAAM;AACZ,YAAMW,QAAQ,GAAIC,WAAD,IAAiB;AAC9BH,QAAAA,WAAW,CAACG,WAAD,CAAX;AACH,OAFD;;AAIAX,MAAAA,aAAa,CAACY,SAAd,CAAwBF,QAAxB;AACA,aAAO,MAAM;AACTV,QAAAA,aAAa,CAACa,WAAd,CAA0BH,QAA1B;AACH,OAFD;AAGH,KATQ,EASN,EATM,CAAT;AAWA,WAAO,CAACH,QAAD,CAAP;AACH,GAfM;AATU,CAArB;AA2BA,eAAeN,YAAf","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport tokenProvider from './TokenProvider';\r\n\r\nconst AuthProvider = {\r\n    login: function(newTokens) {\r\n        tokenProvider.setTokens(newTokens);\r\n    },\r\n\r\n    logout: function() {\r\n        tokenProvider.setTokens(null);\r\n    },\r\n\r\n    useAuth: function() {\r\n        const [isLogged, setIsLogged] = useState(tokenProvider.isLoggedIn());\r\n\r\n        useEffect(() => {\r\n            const listener = (newIsLogged) => {\r\n                setIsLogged(newIsLogged);\r\n            };\r\n\r\n            tokenProvider.subscribe(listener);\r\n            return () => {\r\n                tokenProvider.unsubscribe(listener);\r\n            };\r\n        }, []);\r\n\r\n        return [isLogged];\r\n    }\r\n}\r\n\r\nexport default AuthProvider;"]},"metadata":{},"sourceType":"module"}