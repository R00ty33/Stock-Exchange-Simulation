{"ast":null,"code":"import React from 'react';\nconst TokenProvider = {\n  setTokens: function (access_token, refresh_token) {\n    localStorage.setItem(\"Access Token\", access_token);\n    localStorage.setItem(\"Refresh Token\", refresh_token);\n  },\n  setToken: function (token) {\n    if (token) {\n      localStorage.setItem(\"REACT_TOKEN_AUTH\", JSON.stringify(token));\n    } else {\n      localStorage.removeItem(\"REACT_TOKEN_AUTH\");\n    }\n  },\n  getExpirationDate: function (jwtToken) {\n    if (!jwtToken) {\n      return null;\n    }\n\n    const jwt = JSON.parse(jwtToken.split('.')[1]); // multiply by 1000 to convert seconds into milliseconds\n    // return jwt && jwt.exp && jwt.exp * 1000;\n  },\n  isExpired: function (expirationDate) {\n    if (!expirationDate) {\n      return false;\n    } // return Date.now() > expirationDate; /* Returns true if the expiration is invalid/expired */\n\n  },\n  getToken: async function () {\n    if (!localStorage.getItem(\"REACT_TOKEN_AUTH\")) {\n      return null;\n    }\n\n    if (isExpired(getExpirationDate(localStorage.getItem(\"REACT_TOKEN_AUTH\")))) {\n      /*\r\n      const updatedToken = await fetch('/update-token', {\r\n          method: 'POST',\r\n          // method to update token \r\n      })\r\n      */\n      // setToken(updatedToken);\n    }\n\n    return localStorage.getItem(\"REACT_TOKEN_AUTH\");\n  },\n  isLoggedIn: function () {\n    return;\n  }\n};\nexport default TokenProvider;","map":{"version":3,"sources":["C:/Users/Nrudo/Documents/gitHub_projects/Stock/src/main/ui/src/components/TokenProvider.js"],"names":["React","TokenProvider","setTokens","access_token","refresh_token","localStorage","setItem","setToken","token","JSON","stringify","removeItem","getExpirationDate","jwtToken","jwt","parse","split","isExpired","expirationDate","getToken","getItem","isLoggedIn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,aAAa,GAAG;AAGlBC,EAAAA,SAAS,EAAE,UAASC,YAAT,EAAuBC,aAAvB,EAAsC;AAC7CC,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCH,YAArC;AACAE,IAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCF,aAAtC;AACH,GANiB;AAQlBG,EAAAA,QAAQ,EAAE,UAASC,KAAT,EAAgB;AACtB,QAAIA,KAAJ,EAAW;AACPH,MAAAA,YAAY,CAACC,OAAb,CAAqB,kBAArB,EAAyCG,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAzC;AACH,KAFD,MAEO;AACHH,MAAAA,YAAY,CAACM,UAAb,CAAwB,kBAAxB;AACH;AACJ,GAdiB;AAgBlBC,EAAAA,iBAAiB,EAAE,UAASC,QAAT,EAAmB;AAClC,QAAI,CAACA,QAAL,EAAe;AACX,aAAO,IAAP;AACH;;AAED,UAAMC,GAAG,GAAGL,IAAI,CAACM,KAAL,CAAWF,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAX,CAAZ,CALkC,CAOlC;AACA;AACH,GAzBiB;AA4BlBC,EAAAA,SAAS,EAAE,UAASC,cAAT,EAAyB;AAChC,QAAI,CAACA,cAAL,EAAqB;AACjB,aAAO,KAAP;AACH,KAH+B,CAKhC;;AACH,GAlCiB;AAoClBC,EAAAA,QAAQ,EAAE,kBAAiB;AACvB,QAAI,CAACd,YAAY,CAACe,OAAb,CAAqB,kBAArB,CAAL,EAA+C;AAC3C,aAAO,IAAP;AACH;;AAGD,QAAIH,SAAS,CAACL,iBAAiB,CAACP,YAAY,CAACe,OAAb,CAAqB,kBAArB,CAAD,CAAlB,CAAb,EAA4E;AACxE;AACZ;AACA;AACA;AACA;AACA;AAEY;AACH;;AAED,WAAOf,YAAY,CAACe,OAAb,CAAqB,kBAArB,CAAP;AACH,GAtDiB;AAwDlBC,EAAAA,UAAU,EAAE,YAAW;AACnB;AACH;AA1DiB,CAAtB;AA+DA,eAAepB,aAAf","sourcesContent":["import React from 'react';\r\n\r\nconst TokenProvider = {\r\n\r\n    \r\n    setTokens: function(access_token, refresh_token) {\r\n        localStorage.setItem(\"Access Token\", access_token);\r\n        localStorage.setItem(\"Refresh Token\", refresh_token);\r\n    },\r\n\r\n    setToken: function(token) {\r\n        if (token) {\r\n            localStorage.setItem(\"REACT_TOKEN_AUTH\", JSON.stringify(token));\r\n        } else {\r\n            localStorage.removeItem(\"REACT_TOKEN_AUTH\");\r\n        }\r\n    },\r\n\r\n    getExpirationDate: function(jwtToken) {\r\n        if (!jwtToken) {\r\n            return null;\r\n        }\r\n    \r\n        const jwt = JSON.parse(jwtToken.split('.')[1]);\r\n    \r\n        // multiply by 1000 to convert seconds into milliseconds\r\n        // return jwt && jwt.exp && jwt.exp * 1000;\r\n    },\r\n\r\n    \r\n    isExpired: function(expirationDate) {\r\n        if (!expirationDate) {\r\n            return false;\r\n        }\r\n\r\n        // return Date.now() > expirationDate; /* Returns true if the expiration is invalid/expired */\r\n    },\r\n\r\n    getToken: async function() {\r\n        if (!localStorage.getItem(\"REACT_TOKEN_AUTH\")) {\r\n            return null;\r\n        }\r\n\r\n        \r\n        if (isExpired(getExpirationDate(localStorage.getItem(\"REACT_TOKEN_AUTH\")))) {\r\n            /*\r\n            const updatedToken = await fetch('/update-token', {\r\n                method: 'POST',\r\n                // method to update token \r\n            })\r\n            */\r\n\r\n            // setToken(updatedToken);\r\n        }\r\n\r\n        return localStorage.getItem(\"REACT_TOKEN_AUTH\");\r\n    },\r\n\r\n    isLoggedIn: function() { \r\n        return \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default TokenProvider;"]},"metadata":{},"sourceType":"module"}