{"ast":null,"code":"'use strict'; // btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\n\nE.prototype = new Error();\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n\n  for ( // initialize result and counter\n  var block, charCode, idx = 0, map = chars; // if the next str index does not exist:\n  //   change the mapping table to \"=\"\n  //   check if d has no fractional digits\n  str.charAt(idx | 0) || (map = '=', idx % 1); // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n  output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n\n    block = block << 8 | charCode;\n  }\n\n  return output;\n}\n\nmodule.exports = btoa;","map":{"version":3,"sources":["C:/Users/Nrudo/node_modules/axios/lib/helpers/btoa.js"],"names":["chars","E","message","prototype","Error","code","name","btoa","input","str","String","output","block","charCode","idx","map","charAt","charCodeAt","module","exports"],"mappings":"AAAA,a,CAEA;;AAEA,IAAIA,KAAK,GAAG,mEAAZ;;AAEA,SAASC,CAAT,GAAa;AACX,OAAKC,OAAL,GAAe,sCAAf;AACD;;AACDD,CAAC,CAACE,SAAF,GAAc,IAAIC,KAAJ,EAAd;AACAH,CAAC,CAACE,SAAF,CAAYE,IAAZ,GAAmB,CAAnB;AACAJ,CAAC,CAACE,SAAF,CAAYG,IAAZ,GAAmB,uBAAnB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,MAAIC,GAAG,GAAGC,MAAM,CAACF,KAAD,CAAhB;AACA,MAAIG,MAAM,GAAG,EAAb;;AACA,QACE;AACA,MAAIC,KAAJ,EAAWC,QAAX,EAAqBC,GAAG,GAAG,CAA3B,EAA8BC,GAAG,GAAGf,KAFtC,EAGE;AACA;AACA;AACAS,EAAAA,GAAG,CAACO,MAAJ,CAAWF,GAAG,GAAG,CAAjB,MAAwBC,GAAG,GAAG,GAAN,EAAWD,GAAG,GAAG,CAAzC,CANF,EAOE;AACAH,EAAAA,MAAM,IAAII,GAAG,CAACC,MAAJ,CAAW,KAAKJ,KAAK,IAAI,IAAIE,GAAG,GAAG,CAAN,GAAU,CAAvC,CARZ,EASE;AACAD,IAAAA,QAAQ,GAAGJ,GAAG,CAACQ,UAAJ,CAAeH,GAAG,IAAI,IAAI,CAA1B,CAAX;;AACA,QAAID,QAAQ,GAAG,IAAf,EAAqB;AACnB,YAAM,IAAIZ,CAAJ,EAAN;AACD;;AACDW,IAAAA,KAAK,GAAGA,KAAK,IAAI,CAAT,GAAaC,QAArB;AACD;;AACD,SAAOF,MAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiBZ,IAAjB","sourcesContent":["'use strict';\n\n// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\nE.prototype = new Error;\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n  for (\n    // initialize result and counter\n    var block, charCode, idx = 0, map = chars;\n    // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1);\n    // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n  ) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\n\nmodule.exports = btoa;\n"]},"metadata":{},"sourceType":"script"}