{"ast":null,"code":"import React from 'react';\nconst TokenProvider = {\n  setTokens: function (access_token, refresh_token) {\n    localStorage.setItem(\"ACCESS_TOKEN\", access_token);\n    localStorage.setItem(\"REFRESH_TOKEN\", refresh_token);\n  },\n  getAccessToken: function () {\n    return localStorage.getItem(\"ACCESS_TOKEN\");\n  },\n  getRefreshToken: function () {\n    return localStorage.getItem(\"REFRESH_TOKEN\");\n  },\n  getExpirationDate: function (jwtToken) {\n    if (jwtToken === null || jwtToken === 'null') {\n      return null;\n    }\n\n    if (!jwtToken) {\n      return null;\n    }\n\n    const jwt = JSON.parse(atob(jwtToken.split('.')[1])); // multiply by 1000 to convert seconds into milliseconds\n\n    return jwt && jwt.exp && jwt.exp * 1000;\n  },\n  isExpired: function (expirationDate) {\n    if (expirationDate === null || expirationDate === 'null') {\n      return true;\n    }\n\n    return Date.now() > expirationDate;\n    /* Returns true if the expiration is invalid/expired */\n  },\n  getToken: async function () {\n    if (!localStorage.getItem(\"ACCESS_TOKEN\")) {\n      return null;\n    }\n\n    if (isExpired(getExpirationDate(localStorage.getItem(\"ACCESS_TOKEN\")))) {\n      /*\r\n      const updatedToken = await fetch('/update-token', {\r\n          method: 'POST',\r\n          // send refresh token\r\n          // method to update token \r\n      })\r\n          .then(r => r.json());\r\n      */\n      // setTokens(updatedToken, updatedRefreshToken);\n    }\n\n    return localStorage.getItem(\"ACCESS_TOKEN\");\n  },\n  isLoggedIn: function () {\n    // if (localStorage.getItem(\"ACCESS_TOKEN\")) return false;\n    if (isExpired(getExpirationDate(localStorage.getItem(\"ACCESS_TOKEN\")))) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\nexport default TokenProvider;\n/** EXPORT FUNCTIONS */\n\n/** defined functions that are used in above functions */\n\nfunction getExpirationDate(jwtToken) {\n  if (jwtToken === null || jwtToken === 'null') {\n    return null;\n  }\n\n  const jwt = JSON.parse(atob(jwtToken.split('.')[1])); // multiply by 1000 to convert seconds into milliseconds\n\n  return jwt && jwt.exp && jwt.exp * 1000;\n}\n\nfunction isExpired(expirationDate) {\n  if (expirationDate === null || expirationDate === 'null') {\n    return true;\n  }\n\n  if (!expirationDate) {\n    return true;\n  }\n\n  return Date.now() > expirationDate;\n  /* Returns true if the expiration is invalid/expired */\n}","map":{"version":3,"sources":["C:/Users/Nrudo/Documents/gitHub_projects/Stock/src/main/ui/src/components/TokenProvider.js"],"names":["React","TokenProvider","setTokens","access_token","refresh_token","localStorage","setItem","getAccessToken","getItem","getRefreshToken","getExpirationDate","jwtToken","jwt","JSON","parse","atob","split","exp","isExpired","expirationDate","Date","now","getToken","isLoggedIn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,SAAS,EAAE,UAASC,YAAT,EAAuBC,aAAvB,EAAsC;AAC7CC,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCH,YAArC;AACAE,IAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCF,aAAtC;AACH,GAJiB;AAMlBG,EAAAA,cAAc,EAAE,YAAW;AACvB,WAAOF,YAAY,CAACG,OAAb,CAAqB,cAArB,CAAP;AACH,GARiB;AAUlBC,EAAAA,eAAe,EAAE,YAAW;AACxB,WAAOJ,YAAY,CAACG,OAAb,CAAqB,eAArB,CAAP;AACH,GAZiB;AAclBE,EAAAA,iBAAiB,EAAE,UAASC,QAAT,EAAmB;AAClC,QAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,MAAtC,EAA8C;AAC1C,aAAO,IAAP;AACH;;AACD,QAAI,CAACA,QAAL,EAAe;AACX,aAAO,IAAP;AACH;;AAED,UAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACJ,QAAQ,CAACK,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAD,CAAf,CAAZ,CARkC,CAUlC;;AACA,WAAOJ,GAAG,IAAIA,GAAG,CAACK,GAAX,IAAkBL,GAAG,CAACK,GAAJ,GAAU,IAAnC;AACH,GA1BiB;AA6BlBC,EAAAA,SAAS,EAAE,UAASC,cAAT,EAAyB;AAChC,QAAIA,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,MAAlD,EAA0D;AACtD,aAAO,IAAP;AACH;;AAED,WAAOC,IAAI,CAACC,GAAL,KAAaF,cAApB;AAAoC;AACvC,GAnCiB;AAqClBG,EAAAA,QAAQ,EAAE,kBAAiB;AACvB,QAAI,CAACjB,YAAY,CAACG,OAAb,CAAqB,cAArB,CAAL,EAA2C;AACvC,aAAO,IAAP;AACH;;AAED,QAAIU,SAAS,CAACR,iBAAiB,CAACL,YAAY,CAACG,OAAb,CAAqB,cAArB,CAAD,CAAlB,CAAb,EAAwE;AACpE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AAEY;AACH;;AAED,WAAOH,YAAY,CAACG,OAAb,CAAqB,cAArB,CAAP;AACH,GAxDiB;AA0DlBe,EAAAA,UAAU,EAAE,YAAW;AACnB;AACA,QAAKL,SAAS,CAACR,iBAAiB,CAACL,YAAY,CAACG,OAAb,CAAqB,cAArB,CAAD,CAAlB,CAAd,EAA0E;AACtE,aAAO,KAAP;AACH,KAFD,MAGK;AACD,aAAO,IAAP;AACH;AACJ;AAlEiB,CAAtB;AAsEA,eAAeP,aAAf;AAA8B;;AAG9B;;AACA,SAASS,iBAAT,CAA2BC,QAA3B,EAAqC;AACjC,MAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,MAAtC,EAA8C;AAC1C,WAAO,IAAP;AACH;;AAED,QAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACJ,QAAQ,CAACK,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAD,CAAf,CAAZ,CALiC,CAOjC;;AACA,SAAOJ,GAAG,IAAIA,GAAG,CAACK,GAAX,IAAkBL,GAAG,CAACK,GAAJ,GAAU,IAAnC;AACH;;AAGD,SAASC,SAAT,CAAoBC,cAApB,EAAoC;AAChC,MAAIA,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,MAAlD,EAA0D;AACtD,WAAO,IAAP;AACH;;AACD,MAAI,CAACA,cAAL,EAAqB;AACjB,WAAO,IAAP;AACH;;AAED,SAAOC,IAAI,CAACC,GAAL,KAAaF,cAApB;AAAoC;AACvC","sourcesContent":["import React from 'react';\r\n\r\nconst TokenProvider = {\r\n    setTokens: function(access_token, refresh_token) {\r\n        localStorage.setItem(\"ACCESS_TOKEN\", access_token);\r\n        localStorage.setItem(\"REFRESH_TOKEN\", refresh_token);\r\n    },\r\n\r\n    getAccessToken: function() {\r\n        return localStorage.getItem(\"ACCESS_TOKEN\");\r\n    },\r\n\r\n    getRefreshToken: function() {\r\n        return localStorage.getItem(\"REFRESH_TOKEN\");\r\n    },\r\n\r\n    getExpirationDate: function(jwtToken) {\r\n        if (jwtToken === null || jwtToken === 'null') {\r\n            return null;\r\n        }\r\n        if (!jwtToken) {\r\n            return null;\r\n        }\r\n    \r\n        const jwt = JSON.parse(atob(jwtToken.split('.')[1]));\r\n    \r\n        // multiply by 1000 to convert seconds into milliseconds\r\n        return jwt && jwt.exp && jwt.exp * 1000;\r\n    },\r\n\r\n    \r\n    isExpired: function(expirationDate) {\r\n        if (expirationDate === null || expirationDate === 'null') {\r\n            return true;\r\n        }\r\n\r\n        return Date.now() > expirationDate; /* Returns true if the expiration is invalid/expired */\r\n    },\r\n\r\n    getToken: async function() {\r\n        if (!localStorage.getItem(\"ACCESS_TOKEN\")) {\r\n            return null;\r\n        }\r\n        \r\n        if (isExpired(getExpirationDate(localStorage.getItem(\"ACCESS_TOKEN\")))) {\r\n            /*\r\n            const updatedToken = await fetch('/update-token', {\r\n                method: 'POST',\r\n                // send refresh token\r\n                // method to update token \r\n            })\r\n                .then(r => r.json());\r\n            */\r\n\r\n            // setTokens(updatedToken, updatedRefreshToken);\r\n        }\r\n\r\n        return localStorage.getItem(\"ACCESS_TOKEN\");\r\n    },\r\n\r\n    isLoggedIn: function() { \r\n        // if (localStorage.getItem(\"ACCESS_TOKEN\")) return false;\r\n        if ((isExpired(getExpirationDate(localStorage.getItem(\"ACCESS_TOKEN\"))))) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default TokenProvider; /** EXPORT FUNCTIONS */\r\n\r\n\r\n/** defined functions that are used in above functions */\r\nfunction getExpirationDate(jwtToken) {\r\n    if (jwtToken === null || jwtToken === 'null') {\r\n        return null;\r\n    }\r\n\r\n    const jwt = JSON.parse(atob(jwtToken.split('.')[1]));\r\n\r\n    // multiply by 1000 to convert seconds into milliseconds\r\n    return jwt && jwt.exp && jwt.exp * 1000;\r\n}\r\n\r\n\r\nfunction isExpired (expirationDate) {\r\n    if (expirationDate === null || expirationDate === 'null') {\r\n        return true;\r\n    }\r\n    if (!expirationDate) {\r\n        return true;\r\n    }\r\n\r\n    return Date.now() > expirationDate; /* Returns true if the expiration is invalid/expired */\r\n}"]},"metadata":{},"sourceType":"module"}